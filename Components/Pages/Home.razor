@page "/"
@using BudgetBuddy.Mediator.Profiles
@using MediatR
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Cards
@inject IMediator Mediator

<div class="row p-3 p-lg-5">
	<div class="col-12 col-lg-6">
		<div class="row">

			<div class="col-12 my-1 my-lg-5">
				<div class="d-flex justify-content-center">
					
					<SfAccumulationChart @ref="_sfAccumulationChart" EnableAnimation="true" Width="100%" Height="100%" Theme="@Theme.Bootstrap5Dark" Background="Transparent" EnableBorderOnMouseMove="false" EnableSmartLabels="false" HighlightPattern="SelectionPattern.Circle">
						<AccumulationChartBorder Color="Transparent"></AccumulationChartBorder>
						<AccumulationChartTooltipSettings Enable="true" Format="${point.x}" EnableHighlight="true"></AccumulationChartTooltipSettings>
						<AccumulationChartSeriesCollection>
							<AccumulationChartSeries DataSource="@ChartData" Radius="85%" XName="Tooltip" YName="Percentage" InnerRadius="40%" Palettes="@_colourPalette" StartAngle="270" EndAngle="270">
								<AccumulationChartSeriesBorder Color="#1F2937" Width="3"></AccumulationChartSeriesBorder>
								<AccumulationDataLabelSettings Visible="false" Name="Title" Position="AccumulationLabelPosition.Outside">
									<AccumulationChartConnector Length="10px" Type="ConnectorType.Curve" Color="#FFFFFF"></AccumulationChartConnector>
									<AccumulationChartDataLabelFont Color="white"></AccumulationChartDataLabelFont>
								</AccumulationDataLabelSettings>
							</AccumulationChartSeries>
						</AccumulationChartSeriesCollection>
						<AccumulationChartLegendSettings Visible="false" Position="LegendPosition.Bottom" Background="transparent" EnableHighlight="true">
							<AccumulationChartLegendFont Color="white" Size="14px" FontFamily="Segoe UI"></AccumulationChartLegendFont>
						</AccumulationChartLegendSettings>
					</SfAccumulationChart>

				</div>
			</div>

			<div class="col-12">
				<div class="row px-0 px-lg-5">
					<div class="col-6">
						<SfCard CssClass="card">
							<CardContent>
								<div class="card-body m-1 p-1">
									<small class="text-secondary">INCOME</small>
									<h5 class="text-success fw-bold mb-0">
										£50,000
									</h5>
								</div>
							</CardContent>
						</SfCard>
					</div>
					<div class="col-6">
						<SfCard CssClass="card">
							<CardContent>
								<div class="card-body m-1 p-1">
									<small class="text-secondary">OUTCOME</small>
									<h5 class="text-danger fw-bold mb-0">£5,000</h5>
								</div>
							</CardContent>
						</SfCard>
					</div>
				</div>
			</div>

		</div>

	</div>

	<div class="col-12 col-lg-6" style="min-height: 300px;">
		<h3>Transactions (@Transactions.Count)</h3>

		@foreach (var transaction in Transactions)
		{
			<SfCard CssClass="card mb-2">
				<CardContent>
					<div class="d-flex justify-content-between">
						<span>@transaction.Name</span>
						<span>£@transaction.Price</span>
						<span class="text-danger" @onclick="@(() => Delete(transaction.Name))">Delete</span>
					</div>
				</CardContent>
			</SfCard>

			

		}

		@*
		<SfGrid DataSource="@Transactions" Width="100%" Height="100%" AllowPaging="true">
   			<GridColumns>
   				<GridColumn Field="@nameof(GetTransactionsResult.Transaction.Name)" HeaderText="Name" Width="120"></GridColumn>
   				<GridColumn Field="@nameof(GetTransactionsResult.Transaction.Price)" HeaderText="Price (£)" HeaderTextAlign="TextAlign.Right" TextAlign="TextAlign.Right" Width="150"></GridColumn>
   			</GridColumns>
		   </SfGrid>
		*@
	
	</div>
</div>

<a href="/counter">Counter</a>
<a href="/weather">Weather</a>

	
@code
{
	private readonly string[] _colourPalette = ["#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2", "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300"];
	private SfDashboardLayout sfDashboardLayout;
	private SfAccumulationChart _sfAccumulationChart;

	private List<GetTransactionsResult.Transaction> Transactions { get; } = [];
	public List<ChartDataViewModel> ChartData { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		var cancellationToken = new CancellationTokenSource().Token;
		//Transactions = (await Mediator.Send(new GetTransactionsQuery(), cancellationToken)).Transactions;

		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Test", Price = 20.00m });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Test", Price = 14.00m, CategoryName = "Test Category"});

		var totalAmount = Transactions.Sum(t => t.Price);

		ChartData = Transactions
			.GroupBy(t => t.CategoryName ?? "Uncategorized")
			.Select(g => new ChartDataViewModel
			{
				Title = g.Key,
				Price = g.Sum(t => t.Price),
				Percentage = Math.Round((g.Sum(t => t.Price) / totalAmount) * 100, 2),
				Tooltip = $"{g.Key} - {Math.Round((g.Sum(t => t.Price) / totalAmount) * 100, 2)}%"
			})
			.ToList();
	}


	private async Task OnWindowResize(Syncfusion.Blazor.Layouts.ResizeArgs args)
	{
		await Task.Delay(250);
		await sfDashboardLayout.RefreshAsync();
	}

	private async Task Delete(string id)
	{

	}


	private async Task OnChartResize(AccumulationResizeEventArgs args)
	{
		await Task.Delay(250);
		await _sfAccumulationChart.PrintAsync();
	}

	public class ChartDataViewModel
	{
		public string Tooltip { get; set; }
		public decimal Percentage { get; set; }
		public decimal Price { get; set; }
		public string Title { get; set; }
	}
}