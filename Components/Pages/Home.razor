@page "/"
@using BudgetBuddy.Data.Entities
@using BudgetBuddy.Mediator.Profiles
@using MediatR
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Cards
@inject IMediator Mediator
@inject IJSRuntime JsRuntime

<div class="row p-3 p-lg-5">
	<div class="col-12 col-lg-6">
		<div class="row">

			<div class="col-12 my-1 my-lg-5">
				<div class="d-flex justify-content-center">

					<SfAccumulationChart @ref="_sfAccumulationChart" EnableAnimation="true" Width="100%" Height="100%" Theme="@Theme.Bootstrap5Dark" Background="Transparent" EnableBorderOnMouseMove="false" EnableSmartLabels="false">
						<AccumulationChartBorder Color="Transparent"></AccumulationChartBorder>
						<AccumulationChartTooltipSettings Enable="true" Format="${point.x}" EnableHighlight="true"></AccumulationChartTooltipSettings>
						<AccumulationChartSeriesCollection>
							<AccumulationChartSeries DataSource="@ChartData" Radius="85%" XName="Tooltip" YName="Percentage" InnerRadius="40%" Palettes="@_colourPalette" StartAngle="270" EndAngle="270">
								<AccumulationDataLabelSettings Visible="true" Name="Title" Position="AccumulationLabelPosition.Outside">
									<AccumulationChartConnector Length="10px" Type="ConnectorType.Curve" Color="#FFFFFF"></AccumulationChartConnector>
									<AccumulationChartDataLabelFont Color="white"></AccumulationChartDataLabelFont>
								</AccumulationDataLabelSettings>
							</AccumulationChartSeries>
						</AccumulationChartSeriesCollection>
						<AccumulationChartLegendSettings Visible="true" Position="LegendPosition.Bottom" Background="transparent" EnableHighlight="true">
							<AccumulationChartLegendFont Color="white" Size="14px" FontFamily="Segoe UI"></AccumulationChartLegendFont>
						</AccumulationChartLegendSettings>
					</SfAccumulationChart>

				</div>
			</div>

			<div class="col-12">
				<div class="row px-0 px-lg-5">
					<div class="col-4">
						<SfCard CssClass="card">
							<CardContent>
								<div class="card-body m-1 p-1">
									<small class="text-secondary">INCOME</small>
									<h6 class="text-success fw-bold mb-0">
										@TotalIncome.ToString("£#,0.00")
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-caret-up-fill" viewBox="0 0 16 16">
											<path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
										</svg>		
									</h6>
								</div>
							</CardContent>
						</SfCard>
					</div>
					<div class="col-4">
						<SfCard CssClass="card">
							<CardContent>
								<div class="card-body m-1 p-1">
									<small class="text-secondary">OUTCOME</small>
									<h6 class="text-danger fw-bold mb-0">
										@TotalOutcome.ToString("£#,0.00")
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-caret-down-fill" viewBox="0 0 16 16">
											<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
										</svg>
									</h6>
								</div>
							</CardContent>
						</SfCard>
					</div>
					<div class="col-4">
						<SfCard CssClass="card">
							<CardContent>
								<div class="card-body m-1 p-1">
									<small class="text-secondary">LEFT OVER</small>
									<h6 class="text-info fw-bold mb-0">
										@((TotalIncome - TotalOutcome).ToString("£#,0.00"))
									</h6>
								</div>
							</CardContent>
						</SfCard>
					</div>
				</div>
			</div>

		</div>

	</div>

	<div class="col-12 col-lg-6" style="min-height: 300px;">
		<h5 class="my-4 mt-lg-0 mb-lg-3 fw-bold">Transactions (@Transactions.Count)</h5>

		@foreach (var transaction in Transactions)
		{
			<SfCard CssClass="card mb-2">
				<CardContent>
					<div class="card-body p-0">
						<div class="row">
							<div class="col-6">
								@switch (transaction.Type)
								{
									case Transaction.TransactionType.Income:
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-caret-up-fill text-success me-2" viewBox="0 0 16 16">
											<path d="m7.247 4.86-4.796 5.481c-.566.647-.106 1.659.753 1.659h9.592a1 1 0 0 0 .753-1.659l-4.796-5.48a1 1 0 0 0-1.506 0z"/>
										</svg>
										break;

									case Transaction.TransactionType.Outcome:
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-caret-down-fill text-danger me-2" viewBox="0 0 16 16">
											<path d="M7.247 11.14 2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z"/>
										</svg>
										break;

									case Transaction.TransactionType.Pending:
										<svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-dash text-warning me-2" viewBox="0 0 16 16">
											<path d="M4 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 4 8"/>
										</svg>
										break;
								}
								<span>@transaction.Name</span>
							</div>
							<div class="col-4 text-end">
								@switch (transaction.Type)
								{
									case Transaction.TransactionType.Income:
										<span class="text-success">@transaction.Price.ToString("£#,0.00")</span>
										break;

									case Transaction.TransactionType.Outcome:
										<span class="text-danger">@transaction.Price.ToString("£#,0.00")</span>
										break;

									case Transaction.TransactionType.Pending:
										<span class="text-warning">@transaction.Price.ToString("£#,0.00")</span>
										break;
								}
							</div>
							<div class="col-2 text-end">
								<span class="text-info ms-2" @onclick="@(() => Delete(transaction.Name))">
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
										<path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
									</svg>
								</span>
								<span class="text-danger ms-2" @onclick="Modal.Open">
									<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
										<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
									</svg>
								</span>
							</div>

						</div>
					</div>
				</CardContent>
			</SfCard>



		}

		@*
		<SfGrid DataSource="@Transactions" Width="100%" Height="100%" AllowPaging="true">
   			<GridColumns>
   				<GridColumn Field="@nameof(GetTransactionsResult.Transaction.Name)" HeaderText="Name" Width="120"></GridColumn>
   				<GridColumn Field="@nameof(GetTransactionsResult.Transaction.Price)" HeaderText="Price (£)" HeaderTextAlign="TextAlign.Right" TextAlign="TextAlign.Right" Width="150"></GridColumn>
   			</GridColumns>
		   </SfGrid>
		*@

	</div>
</div>

<a href="/counter">Counter</a>
<a href="/weather">Weather</a>



<BudgetBuddy.Components.Component.Modal @ref="Modal" >
	<Title>This is a <em>Title!</em></Title>
	<Body>
		<p>
			Lorem ipsum dolor sit amet, consectetur adipiscing elit. Omnes enim iucundum motum, quo sensus hilaretur.
			<i>Quis istud possit, inquit, negare?</i>
			<mark>Ego vero isti, inquam, permitto.</mark> Duo Reges: constructio interrete.
		</p>
		<dl>
			<dt><dfn>Stoici scilicet.</dfn></dt>
			<dd>An hoc usque quaque, aliter in vita?</dd>
			<dt><dfn>Erat enim Polemonis.</dfn></dt>
			<dd>Quod cum accidisset ut alter alterum necopinato videremus, surrexit statim.</dd>
		</dl>
	</Body>
	<Footer>
		<SfButton @onclick="() => Delete(string.Empty)" CssClass="btn btn-danger">Delete</SfButton>
		<button type="button" class="btn btn-primary">Save changes</button>
		<button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="() => Modal.Close()">Close</button>
	</Footer>
</BudgetBuddy.Components.Component.Modal>



@code
{
	private readonly string[] _colourPalette = ["#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2", "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300"];
	private SfAccumulationChart _sfAccumulationChart;
	private Component.Modal Modal { get; set; }


	private decimal TotalIncome => Transactions.Where(x => x.Type == Transaction.TransactionType.Income).Sum(x => x.Price);
	private decimal TotalOutcome => Transactions.Where(x => x.Type == Transaction.TransactionType.Outcome).Sum(x => x.Price);
	private List<GetTransactionsResult.Transaction> Transactions { get; } = [];
	private List<ChartDataViewModel> ChartData { get; set; } = [];

	protected override async Task OnInitializedAsync()
	{
		var cancellationToken = new CancellationTokenSource().Token;
		//Transactions = (await Mediator.Send(new GetTransactionsQuery(), cancellationToken)).Transactions;

		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Work Pay", Price = 2189.92m, CategoryName = "Earnings", Type = Transaction.TransactionType.Income });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Rent", Price = 950.00m, CategoryName = "Expenses", Type = Transaction.TransactionType.Outcome });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Phone Contract", Price = 40.23m, CategoryName = "Mobile", Type = Transaction.TransactionType.Outcome });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Car Insurance", Price = 140.91m, CategoryName = "Car", Type = Transaction.TransactionType.Outcome });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Car Tax", Price = 15.55m, CategoryName = "Car", Type = Transaction.TransactionType.Outcome });
		Transactions.Add(new GetTransactionsResult.Transaction { Name = "Car Fuel", Price = 70.00m, CategoryName = "Car", Type = Transaction.TransactionType.Pending });


		ChartData = Transactions
			.Where(x => x.Type == Transaction.TransactionType.Outcome)
			.GroupBy(t => t.CategoryName ?? "Uncategorized")
			.Select(g => new ChartDataViewModel
			{
				Title = g.Key,
				Price = g.Sum(t => t.Price),
				Percentage = Math.Round((g.Sum(t => t.Price) / TotalIncome) * 100, 2),
				Tooltip = $"{g.Key} - {Math.Round((g.Sum(t => t.Price) / TotalIncome) * 100, 2)}%"
			})
			.ToList();


		var leftOverPercentage = ChartData.Sum(x => x.Percentage);
		ChartData.Add(new ChartDataViewModel
		{
			Title = "Left Over",
			Price = TotalIncome - TotalOutcome,
			Percentage = 100 - leftOverPercentage,
			Tooltip = $"Left Over - {100 - leftOverPercentage}%"
		});
	}

	private async Task Delete(string id)
	{

		if (Modal.Show)
		{
			Modal.Close();
		}
	}

	public class ChartDataViewModel
	{
		public string Tooltip { get; set; }
		public decimal Percentage { get; set; }
		public decimal Price { get; set; }
		public string Title { get; set; }
		public Transaction.TransactionType Type { get; set; }
	}
}