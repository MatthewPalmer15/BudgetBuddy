@using BudgetBuddy.Infrastructure.Enums.Toast
@using BudgetBuddy.Infrastructure.Services.Toast
@inject IToastManager ToastManager

<div class="fixed top-6 inset-x-4 sm:inset-x-auto sm:right-5 z-50 flex flex-col gap-4 items-center sm:items-end">
    @foreach (var toast in _toasts)
    {
        <div class="@GetToastClass(toast.Type) w-full sm:max-w-xs rounded-lg shadow-lg p-4 text-white relative flex items-center justify-between transition-opacity duration-300 ease-in-out @(toast.IsVisible ? "opacity-100" : "opacity-0")" role="alert" @key="toast.Id">
            <div class="flex items-center gap-2">
                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="@GetIconPath(toast.Type)" clip-rule="evenodd" />
                </svg>
                <span class="text-sm font-medium">@toast.Message</span>
            </div>

            <button type="button" class="ml-4 text-white hover:text-gray-300 focus:outline-none" @onclick="() => DismissToast(toast)">
                <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z" clip-rule="evenodd" />
                </svg>
            </button>
        </div>


    }
</div>

@code {
    private List<ToastMessage> _toasts = new();

    protected override void OnInitialized()
    {
        ToastManager.OnShow += ShowToast;
    }

    private void ShowToast(ToastMessage toast)
    {
        toast.IsVisible = true;

        _toasts.Add(toast);
        StateHasChanged();

        _ = Task.Run(async () =>
        {
            await Task.Delay(toast.Duration);
            toast.IsVisible = false;
            InvokeAsync(StateHasChanged);
            await Task.Delay(300);
            _toasts.Remove(toast);
            await InvokeAsync(StateHasChanged);
        });
    }

    private async void DismissToast(ToastMessage toast)
    {
        toast.IsVisible = false;
        StateHasChanged();
        await Task.Delay(300); // match fade-out time
        _toasts.Remove(toast);
        await InvokeAsync(StateHasChanged);
    }

    private string GetToastClass(ToastType type) => type switch
    {
        ToastType.Success => "bg-green-500",
        ToastType.Error => "bg-red-500",
        ToastType.Info => "bg-blue-500",
        ToastType.Warning => "bg-yellow-400 text-black",
        _ => "bg-gray-500"
    };

    private string GetIconPath(ToastType type) => type switch
    {
        ToastType.Success => "M16.707 5.293a1 1 0 00-1.414 0L9 11.586 6.707 9.293a1 1 0 10-1.414 1.414L9 14.414l8-8a1 1 0 000-1.414z",
        ToastType.Error => "M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 011.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z",
        ToastType.Info => "M18 10c0 4.418-3.582 8-8 8s-8-3.582-8-8 3.582-8 8-8 8 3.582 8 8zm-9-1h2V7h-2v2zm0 2h2v4h-2v-4z",
        ToastType.Warning => "M8.257 3.099c.366-.446.979-.593 1.493-.373.514.22.85.73.85 1.302V10c0 .552-.448 1-1 1s-1-.448-1-1V4.028a.999.999 0 00-.343-.929zM9 13a1.5 1.5 0 100 3 1.5 1.5 0 000-3z",
        _ => ""
    };
}
