@page "/"
@using ValueType = Syncfusion.Blazor.Charts.ValueType
@inherits CustomComponentBase

<HeadContent>
    <Cache CacheKey="Home_Resources" Expiration="TimeSpan.FromHours(10)">
        <link href="/dist/home/home.css" />
    </Cache>
</HeadContent>

<div class="pb-20">
    <div class="flex flex-col lg:flex-row gap-4 p-2 lg:p-6">
        <div class="w-full lg:w-1/2 flex flex-col lg:gap-8">
            <div class="w-full">
                <Container From="Container.ScreenSize.Large" CssClasses="flex justify-center items-center h-[250px] lg:h-[300px]" Visible="false">
                    <SfAccumulationChart EnableAnimation="true"
                                         Width="100%" Height="100%"
                                         Theme="@Theme.Tailwind3Dark"
                                         Background="Transparent"
                                         EnableBorderOnMouseMove="false"
                                         EnableSmartLabels="false">
                        <AccumulationChartBorder Color="Transparent"/>
                        <AccumulationChartTooltipSettings Enable="true" Format="${point.x}" EnableHighlight="true"/>
                        <AccumulationChartSeriesCollection>
                            <AccumulationChartSeries DataSource="@ChartData"
                                                     Radius="95%" InnerRadius="65%"
                                                     XName="Tooltip" YName="Percentage"
                                                     Palettes="@(new[] {"#365A9B", "#C86464", "#5C8C3B", "#BB6428", "#9B9B9B", "#A9B81A", "#0098AD", "#B9548D", "#9E42AC", "#C19D00", "#7D5E00", "#6E44B3", "#313E99", "#A35945", "#4DC7A7", "#7F3A0B", "#5858BC", "#CC9E00", "#487DB0", "#3D4EB8" })"
                                                     StartAngle="270" EndAngle="270">
                                <AccumulationDataLabelSettings Visible="true" Name="Title" Position="AccumulationLabelPosition.Outside">
                                    <AccumulationChartConnector Length="5px" Type="ConnectorType.Curve" Color="Transparent"/>
                                    <AccumulationChartDataLabelFont Color="Transparent"/>
                                </AccumulationDataLabelSettings>
                            </AccumulationChartSeries>
                        </AccumulationChartSeriesCollection>
                        <AccumulationChartLegendSettings Visible="false" Position="LegendPosition.Top" Background="transparent" EnableHighlight="true">
                            <AccumulationChartLegendFont Color="white" Size="8px" TextAlignment="Alignment.Center"></AccumulationChartLegendFont>
                        </AccumulationChartLegendSettings>
                    </SfAccumulationChart>
                </Container>

                <Container CssClasses="mt-4">
                    <SfChart Width="90%" Height="200px" Theme="@Theme.Tailwind3Dark" Background="Transparent">
                        <ChartTitleStyle TextOverflow="TextOverflow.Wrap"></ChartTitleStyle>
                        <ChartSubTitleStyle TextOverflow="TextOverflow.Wrap"></ChartSubTitleStyle>
                        <ChartArea>
                            <ChartAreaBorder Width="0"></ChartAreaBorder>
                        </ChartArea>
                        <ChartMargin Bottom="12"></ChartMargin>

                        <ChartPrimaryXAxis ValueType="ValueType.Category"
                                           LabelIntersectAction="LabelIntersectAction.MultipleRows"
                                           LabelPlacement="LabelPlacement.OnTicks">
                            <ChartAxisLabelStyle TextAlignment="Alignment.Center"></ChartAxisLabelStyle>
                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                        </ChartPrimaryXAxis>
                        <ChartPrimaryYAxis Minimum="0" Maximum="Math.Ceiling(BarChartData.Max(x => x.Count) / 100.0m) * 100" Interval="(double)(Math.Ceiling(BarChartData.Max(x => x.Count) / 100.0m) * 100) * 0.2" Visible="true">
                            <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                            <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                            <ChartAxisLineStyle Color="transparent"></ChartAxisLineStyle>
                            <ChartAxisLabelStyle Color="transparent"></ChartAxisLabelStyle> <!-- hides labels if you don't want them -->
                        </ChartPrimaryYAxis>
                        <ChartTooltipSettings Enable="true" EnableHighlight="true" Header="<b>${series.name}</b>" Format="${point.x} : <b>${point.y}</b>"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="false" ShapeHeight="9" ShapeWidth="9" EnableHighlight="true"></ChartLegendSettings>

                        <ChartSeriesCollection>
                            <ChartSeries DataSource="@BarChartData" XName="Title" YName="Count" PointColorMapping="Colour" Width="10" ColumnSpacing="0" Type="ChartSeriesType.Bar" LegendShape="LegendShape.Rectangle" CornerRadius="@(new ChartCornerRadius { BottomRight = 4, TopRight = 4 })">
                                <ChartMarker>
                                    <ChartDataLabel Visible="false" Position="LabelPosition.Middle">
                                        <ChartDataLabelFont FontWeight="1000" Color="#ffffff"></ChartDataLabelFont>
                                    </ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                </Container>
            </div>

            <div class="grid grid-cols-2 gap-3">

                <div class="col-span-2 flex flex-col items-center backdrop-blur-lg bg-white/5 border border-white/10 rounded-xl shadow-lg">
                    <div class="m-2 p-2 text-center">
                        <p class="text-gray-400 text-[10px]">BALANCE</p>
                        <h6 class="text-blue-400 font-bold text-sm flex items-center justify-center">
                            <div class="w-5 h-5 rounded-full bg-blue-500/10 flex items-center justify-center me-2">
                                <i data-lucide="wallet" class="w-3 h-3 text-blue-400"></i>
                            </div>
                            @TotalBalance.ToString("£#,0.00")
                        </h6>
                    </div>
                </div>


                <div class="flex flex-col backdrop-blur-lg bg-white/5 border border-white/10 rounded-xl shadow-lg">
                    <div class="m-2 p-2">
                        <p class="text-gray-400 text-[10px]">INCOME</p>
                        <h6 class="text-green-400 font-bold text-sm flex items-center">
                            <div class="w-6 h-6 rounded-full bg-green-500/10 flex items-center justify-center me-2">
                                <i data-lucide="trending-up" class="w-3 h-3 text-green-400"></i>
                            </div>
                            @TotalIncome.ToString("£#,0.00")
                        </h6>
                    </div>
                </div>

                <div class="flex flex-col backdrop-blur-lg bg-white/5 border border-white/10 rounded-xl shadow-lg">
                    <div class="m-2 p-2">
                        <p class="text-gray-400 text-[10px]">OUTCOME</p>
                        <h6 class="text-red-400 font-bold text-sm flex items-center">
                            <div class="w-5 h-5 rounded-full bg-red-500/10 flex items-center justify-center me-2">
                                <i data-lucide="trending-down" class="w-3 h-3 text-red-400"></i>
                            </div>
                            @TotalOutcome.ToString("£#,0.00")
                        </h6>
                    </div>
                </div>

            </div>
        </div>


        <div class="w-full lg:w-1/2">
            <div class="mt-6 mb-8 text-center">
                <h4 class="font-bold text-center mb-4 text-white">
                    Transactions This Month
                </h4>

                <div class="inline-flex gap-2">
                    @foreach (var period in new[] { "Daily", "Weekly", "Monthly", "Yearly" })
                    {
                        var isActive = selectedPeriod == period;
                        <button type="button"
                                class="py-1.5 px-4 text-xs font-medium rounded-full border transition-all duration-200 @(isActive ? "bg-white/10 border-white/20 text-white" : "bg-neutral-800/50 text-gray-300 hover:bg-neutral-700/60 hover:text-white")"
                                @onclick="@(() => selectedPeriod = period)">
                            @period
                        </button>
                    }
                </div>
            </div>
            
            @if (selectedPeriod == "Daily")
            {
                @foreach (var day in DailyData)
                {
                    <div class="flex justify-between items-center mt-8 mb-4">
                        <h6 class="font-bold">@day.Date.ToString("dddd dd MMM yyyy")</h6>
                        <span class="font-bold @(day.Amount > 0 ? "text-green-400" : "text-red-400")">@day.Amount.ToString("£#,0.00")</span>
                    </div>

                    @foreach (var transaction in day.Transactions)
                    {
                        <Transaction Item="transaction" />
                    }
                }
            }
            @if (selectedPeriod == "Weekly")
            {
                @foreach (var week in WeeklyData)
                {
                            <div class="flex justify-between items-center mt-8 mb-4">
                                <h6 class="font-bold">@week.WeekNumber</h6>
                                <span class="font-bold @(week.Amount > 0 ? "text-green-400" : "text-red-400")">@week.Amount.ToString("£#,0.00")</span>
                            </div>

                    @foreach (var transaction in week.Transactions)
                    {
                        <Transaction Item="transaction" ShowDate="true" />
                    }
                }
            }
            else if (selectedPeriod == "Monthly")
            {
                @foreach (var month in MonthlyData)
                {
                    <div class="flex justify-between items-center mt-8 mb-4">
                        <h6 class="font-bold">@month.MonthName</h6>
                        <span class="font-bold @(month.Amount > 0 ? "text-green-400" : "text-red-400")">@month.Amount.ToString("£#,0.00")</span>
                    </div>

                    @foreach (var transaction in month.Transactions)
                    {
                        <Transaction Item="transaction" ShowDate="true" />
                    }
                }
            }
            else if (selectedPeriod == "Yearly")
            {
                @foreach (var year in YearlyData)
                {
                    <div class="flex justify-between items-center mt-8 mb-4">
                        <h6 class="font-bold">@year.Year</h6>
                        <span class="font-bold @(year.Amount > 0 ? "text-green-400" : "text-red-400")">@year.Amount.ToString("£#,0.00")</span>
                    </div>

                    @foreach (var transaction in year.Transactions)
                    {
                        <Transaction Item="transaction" ShowDate="true" />
                    }
                }
            }
            
                
        
        
            </div>
    </div>
</div>

<a href="/transactions/edit/" class="fixed bottom-20 right-6 z-60 h-16 w-16 rounded-full bg-blue-600 shadow-xl transition hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-blue-500 dark:hover:bg-blue-400 dark:focus:ring-blue-300 flex items-center justify-center" aria-label="Add">
    <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" stroke-width="2"
         viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
        <path stroke-linecap="round" stroke-linejoin="round" d="M12 4v16m8-8H4"></path>
    </svg>
</a>
