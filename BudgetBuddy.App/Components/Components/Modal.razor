<link href="/dist/components/modal.css" />


@if (Show)
{
    <div class="fixed inset-0 z-50 flex justify-center bg-black bg-opacity-50 @GetVerticalAlignmentClass()" @onclick="Close" id="@Id">
        <div class="@GetSizeClasses() flex flex-col bg-white dark:bg-neutral-800 rounded-xl shadow-lg mx-4 max-h-[calc(100vh-120px)] overflow-hidden" @onclick:stopPropagation>

            <div class="flex justify-between items-center px-4 py-3 border-b border-gray-200 dark:border-neutral-700">
                <h3 class="text-lg font-bold text-gray-800 dark:text-white">@Title</h3>
                <button class="text-gray-500 hover:text-gray-700 dark:text-gray-300 dark:hover:text-white" @onclick="Close">✕</button>
            </div>

            <div class="flex-1 overflow-y-auto px-4 py-3 text-gray-800 dark:text-neutral-400 dark-scrollbar">
                @Body
            </div>

            @if (Footer != null)
            {
                <div class="sticky bottom-0 px-4 py-3 border-t border-gray-200 dark:border-neutral-700 bg-white dark:bg-neutral-800 z-20">
                    @Footer
                </div>
            }
        </div>
    </div>
}

<script src="/dist/components/modal.js"></script>

@code {
    [Inject] 
    private IJSRuntime JsRuntime { get; set; }


    private bool _firstRender { get; set; } = true;

    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();

    [Parameter] public string Title { get; set; } = "";

    [Parameter] public ModalSize Size { get; set; } = ModalSize.Medium;

    [Parameter] public ModalVerticalAlignment VerticalAlignment { get; set; } = ModalVerticalAlignment.Center;


    [Parameter] public RenderFragment? Body { get; set; }

    [Parameter] public RenderFragment? Footer { get; set; }

    private bool Show { get; set; }


    public async Task Open()
    {
        Show = true;
        await Task.Yield();
        await JsRuntime.InvokeVoidAsync("eval", "window.currentPage.open()");
    }

    public void Close()
    {
        Show = false;
    }

    public enum ModalSize
    {
        Small,
        Medium,
        Large,
        ExtraLarge,
        FullScreen
    }

    public enum ModalVerticalAlignment
    {
        Top,
        Center,
        Bottom
    }

    private string GetSizeClasses()
    {
        return Size switch
        {
            ModalSize.Small => "w-full max-w-sm",
            ModalSize.Medium => "w-full max-w-lg",
            ModalSize.Large => "w-full max-w-2xl",
            ModalSize.ExtraLarge => "w-full max-w-5xl",
            ModalSize.FullScreen => "w-screen",
            _ => "w-full max-w-lg"
        };
    }

    private string GetVerticalAlignmentClass()
    {
        return VerticalAlignment switch
        {
            ModalVerticalAlignment.Top => "items-start pt-10",
            ModalVerticalAlignment.Center => "items-center",
            ModalVerticalAlignment.Bottom => "items-end pb-10",
            _ => "items-center"
        };
    }


}